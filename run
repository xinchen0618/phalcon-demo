#!/usr/bin/env php
<?php
declare(strict_types=1);

use Phalcon\Di\FactoryDefault\Cli as CliDi;
use Phalcon\Cli\Console as ConsoleApp;

try {
    /**
     * 错误提示转Exception
     */
    set_error_handler(function ($severity, $message, $file, $line) {
        if (!(error_reporting() & $severity)) {
            return;
        }
        throw new ErrorException($message, 0, $severity, $file, $line);
    });

    define('BASE_PATH', __DIR__);
    define('APP_PATH', BASE_PATH . '/app');
    define('RUNTIME_ENV', $_SERVER['RUNTIME_ENV'] ?? '');

    /**
     * The FactoryDefault Dependency Injector automatically registers the services that
     * provide a full stack framework. These default services can be overridden with custom ones.
     */
    $di = new CliDi();

    /**
     * Include Services
     */
    include APP_PATH . '/config/services.php';

    /**
     * Include Autoloader
     */
    include APP_PATH . '/config/loader.php';

    /**
     * Load task
     */
    $loader->registerNamespaces(
        [
            'app\tasks' => BASE_PATH . '/app/tasks',
        ],
        true
    );
    $loader->register();

    /**
     * Create a console application
     */
    $console = new ConsoleApp($di);

    /**
     * Cron
     */
    $di->setShared('console', $console);
    $di->set('cron', function () {
        $cron = new \Sid\Phalcon\Cron\Manager();

        $cronFile = APP_PATH . '/config/cron_' . RUNTIME_ENV .  '.php';
        if (is_file($cronFile)) {
            $cronTasks = include $cronFile;
            foreach ($cronTasks as $cronTask) {
                $cron->add(
                    new \Sid\Phalcon\Cron\Job\Phalcon(
                        $cronTask['expression'],
                        [
                            'task' => $cronTask['task'],
                            'action' => $cronTask['action'],
                            'params' => $cronTask['params'] ?? []
                        ]
                    )
                );
            }
        }

        return $cron;
    });

    /**
     * Process the console arguments
     */
    $arguments = [];
    foreach ($argv as $k => $arg) {
        if ($k == 1) {
            $arguments['task'] = "\\app\\tasks\\" . ucfirst($arg);
        } elseif ($k == 2) {
            $arguments['action'] = $arg;
        } elseif ($k >= 3) {
            $arguments['params'][] = $arg;
        }
    }

    /**
     * Slow task
     */
    $taskStartTime = microtime(true);

    /**
     * Handle
     */
    $console->handle($arguments);

    $taskCost = microtime(true) - $taskStartTime;
    if ($taskCost > $di->get('config')->slowTaskCost) {
        error_log("慢Task警告! 执行耗时: {$taskCost}秒. Task: " . var_export($arguments, true) . " \n");
    }

    /**
     * If we dont print a new line,
     * then the next command prompt will be placed directly on the left of the output
     * and it is less readable.
     *
     * You can disable this behaviour if the output of your application needs to don't have a new line at end
     */
    echo PHP_EOL;

} catch (Throwable $e) {
    $message = $e->getMessage() . PHP_EOL . $e->getTraceAsString() . PHP_EOL;
    error_log($message);
    echo $message;
    exit(255);
}
